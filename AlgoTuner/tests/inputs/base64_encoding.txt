[INPUT_SEPARATOR]
First, create a Cython helper module for distance calculations.
```python
edit
file: solver.py
lines: 0-0
---
import base64
import hmac
from typing import Any, Union  # Standard library
import numpy as np  # Third-party needed for seeded random bytes

class Solver:
    def __init__(self):
        pass

    def solve(self, problem: dict[str, Any]) -> dict[str, bytes]:
        """
        Encode the plaintext using the Base64 algorithm.
    
        Args:
            problem (dict): The problem dictionary generated by `generate_problem`.
    
        Returns:
            dict: A dictionary containing 'encoded_data'.
        
    
        NOTE: Your solution must pass validation by:
        1. Returning correctly formatted output
        2. Having no NaN or infinity values
        3. Matching expected results within numerical tolerance
        """
        plaintext = problem["plaintext"]
    
        try:
            # Encode the data using standard Base64
            encoded_data = base64.b64encode(plaintext)
            return {"encoded_data": encoded_data}
        
        except Exception as e:
            raise  # Re-raise exception
---
```
[INPUT_SEPARATOR]
First, create a Cython helper module for distance calculations.
```python
edit
file: solver.py
lines: 1-9999
---
import base64

class Solver:
    def __init__(self):
        pass

    def solve(self, problem):
        plaintext = problem["plaintext"]
        encoded_data = base64.b64encode(plaintext)
        return {"encoded_data": encoded_data}
---
```