[INPUT_SEPARATOR]
First, create a Cython helper module for distance calculations.
```python
edit
file: solver.py
lines: 0-0
---
import numpy as np
import ot

class Solver():
    def __init__(self, **kwargs):
        pass
    def solve(self, problem):
        a = np.array(problem["source_weights"], dtype=np.float64)
        b = np.array(problem["target_weights"], dtype=np.float64)
        M = np.ascontiguousarray(problem["cost_matrix"], dtype=np.float64)
        reg = float(problem["reg"])
        try:
            G = ot.sinkhorn(a, b, M, reg)
            if not np.isfinite(G).all():
                raise ValueError("Non‑finite values in transport plan")
            return {"transport_plan": G.tolist(), "error_message": None}
        except Exception as exc:
            logging.error("Sinkhorn solve failed: %s", exc)
            return {"transport_plan": None, "error_message": str(exc)}  # type: ignore
---
```
[INPUT_SEPARATOR]
First, create a Cython helper module for distance calculations.
```python
edit
file: solver.py
lines: 1-9999
---
import numpy as np
import ot

class Solver():
    def __init__(self, **kwargs):
        pass
    def solve(self, problem):
        a = np.array(problem["source_weights"], dtype=np.float64)
        b = np.array(problem["target_weights"], dtype=np.float64)
        M = np.ascontiguousarray(problem["cost_matrix"], dtype=np.float64)
        reg = float(problem["reg"])
        try:
            G = ot.sinkhorn(a, b, M, reg)
            if not np.isfinite(G).all():
                raise ValueError("Non‑finite values in transport plan")
            return {"transport_plan": G, "error_message": None}
        except Exception as exc:
            logging.error("Sinkhorn solve failed: %s", exc)
            return {"transport_plan": None, "error_message": str(exc)}  # type: ignore
---
```